"use strict";var isAndroid=/Android/i.test(navigator.userAgent),hasTouchEvents=/webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)||isAndroid,requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(callback){window.setTimeout(callback,1e3/60)}}(),translateElement=function(jqElement,position){jqElement.css("-webkit-transform","translate3d("+position.x+"px, "+position.y+"px, 0px)")},removeTranslation=function(jqElement){jqElement.css("-webkit-transform","translate3d( 0, 0, 0)")},hasClass=function(jqElement,className){jqElement[0].classList.contains(className)},addClass=function(jqElement,className){jqElement[0].classList.add(className)},removeClass=function(jqElement,className){jqElement[0].classList.remove(className)},getElementDimensions=function(element){var jqElement=$(element),offset=jqElement.offset();return{element:element,jqElement:jqElement,left:offset.left,right:offset.left+jqElement.width(),top:offset.top,bottom:offset.top+jqElement.height()}},checkOverlap={cursor:function(position,dropped){return position.x<dropped.right&&position.x>dropped.left&&position.y>dropped.top&&position.y<dropped.bottom?!0:!1},partial:function(){},centerOfMass:function(){},complete:function(){}},emptyCoordinates={x:0,y:0},getEvents=function(){return{start:hasTouchEvents?"touchstart":"mousedown",move:hasTouchEvents?"touchmove":"mousemove",stop:hasTouchEvents?"touchend":"mouseup"}},getEventCoordinates=function(event){return{x:isAndroid?event.changedTouches[0].pageX:event.pageX,y:isAndroid?event.changedTouches[0].pageY:event.pageY}},diffPositions=function(a,b){return{x:a.x-b.x,y:a.y-b.y}},addEventListener=function(watchedElement,event,onEvent){watchedElement.addEventListener(event,onEvent,!1)},removeListener=function(watchedElement,event,onEvent){watchedElement.removeEventListener(event,onEvent,!1)};angular.module("matt-casey.dragon-drop",[]).directive("mcDraggable",[function(){return{restrict:"A",scope:{targets:"=",onDrop:"="},link:function(scope,element){var dropTargets,currentTarget,isCurrentlyMoving,events,initialEventPosition=emptyCoordinates,cursorPosition=emptyCoordinates,elementPosition=emptyCoordinates,setupDirective=function(){setupElementStyling(),dropTargets=getDropTargets(),events=getEvents(),addEventListener(element[0],events.start,startEventHandler)},setupElementStyling=function(){addClass(element,"draggable")},getDropTargets=function(){for(var tempTargets=[],i=0;i<scope.targets.length;i++)for(var elementList=document.querySelectorAll("[mc-droppable="+scope.targets[i]+"]"),j=0;j<elementList.length;j++){var target=getElementDimensions(elementList[j]);addClass(target.jqElement,"droppable"),console.log(scope.onDrop,scope),target.onDrop=scope.onDrop[i],tempTargets.push(target)}return tempTargets},getCurrentTarget=function(){for(var i=0;i<dropTargets.length;i++)if(checkOverlap.cursor(cursorPosition,dropTargets[i]))return dropTargets[i];return!1},removeHoverFromAll=function(){for(var i=0;i<dropTargets.length;i++)removeClass(dropTargets[i].jqElement,"hover")},callDropEvent=function(){currentTarget.onDrop(element,scope),scope.$apply()},startEventHandler=function(event){isCurrentlyMoving=!0,initialEventPosition=getEventCoordinates(event),cursorPosition=getEventCoordinates(event),addEventListener(document,events.move,moveEventHandler),addEventListener(document,events.stop,stopEventHandler),startAnimation()},moveEventHandler=function(event){cursorPosition=getEventCoordinates(event),currentTarget=getCurrentTarget(),elementPosition=diffPositions(cursorPosition,initialEventPosition)},stopEventHandler=function(){currentTarget&&(callDropEvent(),currentTarget=!1),isCurrentlyMoving=!1,initialEventPosition=emptyCoordinates,elementPosition=emptyCoordinates,cursorPosition=emptyCoordinates,removeListener(document,events.move,moveEventHandler),removeListener(document,events.stop,stopEventHandler)},startAnimation=function(){removeClass(element,"return-animation"),addClass(element,"being-dragged"),requestAnimationFrame(animationLoop)},animationLoop=function(){translateElement(element,elementPosition),removeHoverFromAll(),currentTarget&&addClass(currentTarget.jqElement,"hover"),isCurrentlyMoving?requestAnimationFrame(animationLoop):endAnimation()},endAnimation=function(){removeHoverFromAll(),removeClass(element,"being-dragged"),addClass(element,"return-animation"),removeTranslation(element)};setupDirective()}}}]);